@misc{JefferySnover2016,
author = {{Jeffery Snover}},
title = {{PowerShell is open sourced and is available on Linux | Blog | Microsoft Azure}},
url = {https://azure.microsoft.com/en-us/blog/powershell-is-open-sourced-and-is-available-on-linux/},
urldate = {2017-05-19},
year = {2016}
}
@book{MichaelSikorski,
abstract = {applicability for this approach.},
archivePrefix = {arXiv},
arxivId = {arXiv:1011.1669v3},
author = {Sikorski, Michael and Honig, Andrew},
booktitle = {No Starch},
doi = {10.1017/CBO9781107415324.004},
eprint = {arXiv:1011.1669v3},
isbn = {9788578110796},
issn = {1098-6596},
keywords = {icle},
number = {9},
pages = {1689--1699},
pmid = {25246403},
title = {{Practical Malware Analysis}},
volume = {53},
year = {2013}
}
@inproceedings{Schmidt2009,
abstract = {Smartphones become very critical part of our lives as they offer advanced capabilities with PC-like functionalities. They are getting widely deployed while not only being used for classical voice-centric communication. New smartphone malwares keep emerging where most of them still target Symbian OS. In the case of Symbian OS, application signing seemed to be an appropriate measure for slowing down malware appearance. Unfortunately, latest examples showed that signing can be bypassed resulting in new malware outbreak. In this paper, we present a novel approach to static malware detection in resource-limited mobile environments. This approach can be used to extend currently used third-party application signing mechanisms for increasing malware detection capabilities. In our work, we extract function calls from binaries in order to apply our clustering mechanism, called centroid. This method is capable of detecting unknown malwares. Our results are promising where the employed mechanism might find application at distribution channels, like online application stores. Additionally, it seems suitable for directly being used on smartphones for (pre-)checking installed applications.},
author = {Schmidt, Aubrey Derrick and Clausen, Jan Hendrik and Camtepe, Ahmet and Albayrak, Sahin},
booktitle = {2009 4th International Conference on Malicious and Unwanted Software, MALWARE 2009},
doi = {10.1109/MALWARE.2009.5403024},
file = {:C$\backslash$:/Users/Ihechi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Schmidt et al. - 2009 - Detecting Symbian OS malware through static function call analysis.pdf:pdf},
isbn = {9781424457878},
month = {oct},
pages = {15--22},
publisher = {IEEE},
title = {{Detecting symbian OS malware through static function call analysis}},
url = {http://ieeexplore.ieee.org/document/5403024/},
year = {2009}
}
@misc{ProofpointStaff2016,
author = {{Proofpoint Staff}},
pages = {1},
title = {{August in November: New Information Stealer Hits the Scene | Proofpoint}},
url = {https://www.proofpoint.com/us/threat-insight/post/august-in-december-new-information-stealer-hits-the-scene},
urldate = {2017-05-18},
year = {2016}
}
@article{Rascagneres2016,
author = {Rascagn{\`{e}}res, Paul},
title = {{Poweliks: the persistent malware without a file}},
url = {https://blog.gdatasoftware.com/2014/07/23947-poweliks-the-persistent-malware-without-a-file},
year = {2016}
}
@book{Holmes2012,
author = {Holmes, Lee},
isbn = {1449364276},
publisher = {" O'Reilly Media, Inc."},
title = {{Windows PowerShell Cookbook: The Complete Guide to Scripting Microsoft's Command Shell}},
year = {2012}
}
@inproceedings{Jayaseelan2014,
author = {Jayaseelan, George and Charles, P. Joseph},
booktitle = {2014 World Congress on Computing and Communication Technologies},
doi = {10.1109/WCCCT.2014.60},
file = {::},
month = {feb},
pages = {150--153},
publisher = {IEEE},
title = {{Automated Secured Disaster Recovery with Hyper-V Replica and PowerShell}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6755125},
year = {2014}
}
@inproceedings{Barakat2016,
author = {Barakat, Akram and Hadi, Ali},
booktitle = {2016 Cybersecurity and Cyberforensics Conference (CCC)},
doi = {10.1109/CCC.2016.18},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/Windows Forensic Investigations using PowerForensics Tool.pdf:pdf},
isbn = {978-1-5090-2657-9},
month = {aug},
pages = {41--47},
publisher = {IEEE},
title = {{Windows Forensic Investigations Using PowerForensics Tool}},
url = {http://ieeexplore.ieee.org/document/7600208/},
year = {2016}
}
@misc{Kumar2016,
abstract = {Malware is one of the top most obstructions for expansion and growth of digital acceptance among the users. Both enterprises and common users are struggling to get protected from the malware in the cyberspace, which emphasizes the importance of developing efficient methods of malware detection. In this work, we propose a machine learning based solution to classify a sample as benign or malware with high accuracy and low computation overhead. An integrated feature set has been amalgamated as a combination of portable executable header fields raw value and derived values. Various machine-learning algorithms such as Decision Tree, Random Forest, kNN, Logistic Regression, Linear Discriminant Analysis and Naive Bayes were adopted in the classification of malware. Using existing raw feature set and the proposed integrated feature set we compared performance of each classifier. The empirical evidence indicates 98.4{\%} classification accuracy in the 10-fold cross validation for the proposed integrated feature set. In the experiments conducted on the novel test data set the accuracy was observed as 89.23{\%} for the integrated feature set which is 15{\%} improvement on accuracy achieved with raw-feature set alone. Classification accuracy with only top N features (N = 5, 10, 15, 20, 25) are also experimented and it was observed that with only top 15 features 98{\%} and 97{\%} accuracy can be achieved on integrated and raw feature respectively.},
author = {Kumar, Ajit and Kuppusamy, K S and Aghila, G},
booktitle = {Journal of King Saud University - Computer and Information Sciences},
doi = {10.1016/j.jksuci.2017.01.003},
file = {:C$\backslash$:/Users/Ihechi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Kumar, Kuppusamy, Aghila - 2017 - A learning model to detect maliciousness of portable executable using integrated feature set(2).pdf:pdf},
issn = {22131248},
keywords = {Integrated features,Machine learning,Malware,Portable executable},
title = {{A learning model to detect maliciousness of portable executable using integrated feature set}},
url = {http://ac.els-cdn.com/S1319157817300149/1-s2.0-S1319157817300149-main.pdf?{\_}tid=22945296-38f8-11e7-8b7c-00000aab0f27{\&}acdnat=1494802584{\_}0b42b916c184d2bef4feffcb3d1ae557},
year = {2016}
}
@misc{Milosevic2016,
abstract = {The widespread adoption of Android devices and their capability to access significant private and confidential information have resulted in these devices being targeted by malware developers. Existing Android malware analysis techniques can be broadly categorized into static and dynamic analysis. In this paper, we present two machine learning aided approaches for static analysis of Android malware. The first approach is based on permissions and the other is based on source code analysis utilizing a bag-of-words representation model. Our permission-based model is computationally inexpensive, and is implemented as the feature of OWASP Seraphimdroid Android app that can be obtained from Google Play Store. Our evaluations of both approaches indicate an F-score of 95.1{\%} and F-measure of 89{\%} for the source code-based classification and permission-based classification models, respectively.},
author = {Milosevic, Nikola and Dehghantanha, Ali and Choo, Kim Kwang Raymond},
booktitle = {Computers and Electrical Engineering},
doi = {10.1016/j.compeleceng.2017.02.013},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/Machine Learning Aided Android Malware Classification.pdf:pdf},
issn = {00457906},
keywords = {00-01,99-00,Machine learning,OWASP,OWASP Seraphimdroid Android app,Seraphimdroid Android app,Static malware analysis},
title = {{Machine learning aided Android malware classification}},
url = {http://www.sciencedirect.com/science/article/pii/S0045790617303087},
year = {2016}
}
@article{Islam2013,
abstract = {Collection of dynamic information requires that malware be executed in a controlled environment; the malware unpacks itself as a preliminary to the execution process. On the other hand, while execution of malware is not needed in order to collect static information, the file must first be unpacked manually. None-the-less, if a file has been executed, it is possible to use both static and dynamic information in designing a single classification method. In this paper, we present the first classification method integrating static and dynamic features into a single test. Our approach improves on previous results based on individual features and reduces by half the time needed to test such features separately. Robustness to changes in malware development is tested by comparing results on two sets of malware, the first collected between 2003 and 2007, and the second collected between 2009 and 2010. When classifying the older set as compared to the entire data set, our integrated test demonstrates significantly more robustness than previous methods by losing just 2.7{\%} in accuracy as opposed to a drop of 7{\%}. We conclude that to achieve acceptable accuracy in classifying the latest malware, some older malware should be included in the set of data. ?? 2012 Elsevier Ltd.},
author = {Islam, Rafiqul and Tian, Ronghua and Batten, Lynn M. and Versteeg, Steve},
doi = {10.1016/j.jnca.2012.10.004},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/Base Paper 1- Classification ofmalwarebasedonintegratedstaticanddynamicfeatures.pdf:pdf},
isbn = {1084-8045},
issn = {10848045},
journal = {Journal of Network and Computer Applications},
keywords = {Dynamic feature,Malware classification,Static feature},
number = {2},
pages = {646--656},
publisher = {Elsevier},
title = {{Classification of malware based on integrated static and dynamic features}},
url = {http://dx.doi.org/10.1016/j.jnca.2012.10.004},
volume = {36},
year = {2013}
}
@article{Afonso2015,
abstract = {The constant evolution of mobile devices' resour-ces and features turned ordinary phones into powerful and portable computers, leading their users to perform payments, store sensitive information and even to access other accounts on remote machines. This scenario has contributed to the rapid rise of new malware samples targeting mobile plat-forms. Given that Android is the most widespread mobile operating system and that it provides more options regard-ing application markets (official and alternative stores), it has been the main target for mobile malware. As such, markets that publish Android applications have been used as a point of infection for many users, who unknowingly download some popular applications that are in fact disguised malware. Hence, there is an urge for techniques to analyze and identify malicious applications before they are published and able to harm users. In this article, we present a system to dynami-cally identify whether an Android application is malicious or not, based on machine learning and features extracted from Android API calls and system call traces. We evaluated our system with 7,520 apps, 3,780 for training and 3,740 for test-ing, and obtained a detection rate of 96.66 {\%}.},
author = {Afonso, Vitor Monte and de Amorim, Matheus Favero and Gr{\'{e}}gio, Andr{\'{e}} Ricardo Abed and Junquera, Glauco Barroso and de Geus, Paulo L{\'{i}}cio},
doi = {10.1007/s11416-014-0226-7},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/Identifying Android malware using dynamically obtained features.pdf:pdf},
issn = {22638733},
journal = {Journal of Computer Virology and Hacking Techniques},
number = {1},
pages = {9--17},
title = {{Identifying Android malware using dynamically obtained features}},
url = {http://link.springer.com/article/10.1007{\%}2Fs11416-014-0226-7},
volume = {11},
year = {2015}
}
@article{Abou-Assaleh2004,
abstract = {Email Print Request Permissions The current commercial anti-virus software detects a virus only after the virus has appeared and caused damage. Motivated by the standard signature-based technique for detecting viruses, and a recent successful text classification method, we explore the idea of automatically detecting new malicious code using the collected dataset of the benign and malicious code. We obtained accuracy of 100{\%} in the training data, and 98{\%} in 3-fold cross-validation.},
author = {Abou-Assaleh, T. and Cercone, N. and Keselj, V. and Sweidan, R.},
doi = {10.1109/CMPSAC.2004.1342667},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/N-gram based detection of malicious code.pdf:pdf},
isbn = {0-7695-2209-2},
issn = {0730-3157},
journal = {Proceedings of the 28th Annual International Computer Software and Applications Conference, 2004. COMPSAC 2004.},
number = {1},
pages = {41--42},
title = {{N-gram-based detection of new malicious code}},
url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=1342667},
volume = {2},
year = {2004}
}
@article{Kolter2006,
abstract = {We describe the use of machine learning and data mining to detect and classify malicious exe- cutables as they appear in the wild. We gathered 1,971 benign and 1,651 malicious executables and encoded each as a training example using n-grams of byte codes as features. Such processing resulted in more than 255 million distinct n-grams. After selecting the most relevant n-grams for prediction, we evaluated a variety of inductive methods, including naive Bayes, decision trees, sup- port vector machines, and boosting. Ultimately, boosted decision trees outperformed other methods with an area under the ROC curve of 0.996. Results suggest that our methodology will scale to larger collections of executables. We also evaluated how well the methods classified executables based on the function of their payload, such as opening a backdoor and mass-mailing. Areas under the ROC curve for detecting payload function were in the neighborhood of 0.9, which were smaller than those for the detection task. However, we attribute this drop in performance to fewer training examples and to the challenge of obtaining properly labeled examples, rather than to a failing of the methodology or to some inherent difficulty of the classification task. Finally, we applied detec- tors to 291 malicious executables discovered after we gathered our original collection, and boosted decision trees achieved a true-positive rate of 0.98 for a desired false-positive rate of 0.05. This result is particularly important, for it suggests that our methodology could be used as the basis for an operational system for detecting previously undiscovered malicious executables.},
archivePrefix = {arXiv},
arxivId = {0803.1716},
author = {Kolter, J Zico and Maloof, Marcus a},
doi = {10.1002/asi.20427},
eprint = {0803.1716},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/Learning to Detect and Classify Malicious Executables in the Wild.pdf:pdf},
isbn = {1581138881},
issn = {15324435},
journal = {Journal of Machine Learning Research},
keywords = {computer security,concept learning,data mining,invasive software},
pages = {2721--2744},
pmid = {502955140},
title = {{Learning to Detect and Classify Malicious Executables in the Wild}},
url = {http://portal.acm.org/citation.cfm?id=1248646},
volume = {7},
year = {2006}
}
@article{Bridge2017,
author = {Bridge, Adam},
doi = {10.1016/j.diin.2017.02.007},
issn = {17422876},
journal = {Digital Investigation},
keywords = {windows common controls},
pages = {54--60},
publisher = {Elsevier Ltd},
title = {{Obtaining forensic value from the cbWndExtra structures as used by Windows Common Controls, specifically for the Editbox control}},
url = {http://linkinghub.elsevier.com/retrieve/pii/S1742287617300865},
volume = {20},
year = {2017}
}
@article{Singh2016,
abstract = {The records maintained by Jump Lists have the potential to provide a rich source of evidence about users' historic activity to the forensic investigator. The structure and artifacts recorded by Jump Lists have been widely discussed in various forensic communities since its debut in Microsoft Windows 7. However, this feature has more capabilities to reveal evidence in Windows 10, due to its modified structure. There is no literature published on the structure of Jump Lists in Windows 10 and the tools that can successfully parse the Jump Lists in Windows 7/8, do not work properly for Windows 10. In this paper, we have identified the structure of Jump Lists in Windows 10 and compared it with Windows 7/8. Further, a proof-of-concept tool called JumpListExt (Jump List Extractor) is developed on the basis of identified structure that can parse Jump Lists in Windows 10, individually as well as collectively. Several experiments were conducted to detect anti-forensic attempts like evidence destruction, evidence modification and evidence forging carried out on the records of Jump Lists. Furthermore, we demonstrated the type of artifacts recorded by Jump Lists of four popular web browsers with normal and private browsing mode. Finally, the forensic capability of Jump Lists in Windows 10 is demonstrated in terms of activity timeline constructed over a period of time using Jump Lists.},
author = {Singh, Bhupendra and Singh, Upasna},
doi = {10.1016/j.diin.2016.02.001},
issn = {17422876},
journal = {Digital Investigation},
keywords = {DestList,Jump lists,LNK file analysis,Windows 10,Windows forensics},
pages = {1--13},
publisher = {Elsevier Ltd},
title = {{A forensic insight into Windows 10 Jump Lists}},
url = {http://dx.doi.org/10.1016/j.cose.2017.01.007},
volume = {17},
year = {2016}
}
@misc{Schultz2001,
abstract = {A serious security threat today is malicious executables, especially new, unseen malicious executables often arriving as email attachments. These new malicious executables are created at the rate of thousands every year and pose a serious security threat. Current anti-virus systems attempt to detect these new malicious programs with heuristics generated by hand. This approach is costly and oftentimes ineffective. We present a data mining framework that detects new, previously unseen malicious executables accurately and automatically. The data mining framework automatically found patterns in our data set and used these patterns to detect a set of new malicious binaries. Comparing our detection methods with a traditional signature-based method, our method more than doubles the current detection rates for new malicious executables.},
author = {Schultz, M G and Eskin, E and Zadok, F and Stolfo, S J},
booktitle = {Proceedings 2001 IEEE Symposium on Security and Privacy. S{\&}P 2001},
doi = {10.1109/SECPRI.2001.924286},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/Data Mining Methods for Detection of New Malicious Executables.pdf:pdf},
isbn = {1081-6011 VO -},
keywords = {Computer science,Computer security,Data mining,Data security,Face detection,Information security,Permission,Protection,Testing,Training data,anti-virus systems,data mining,data security,data set,electronic mail,email attachments,heuristics,malicious binaries,malicious executable detection,pattern recognition,security of data,security threat,signature-based method},
pages = {38--49},
title = {{Data mining methods for detection of new malicious executables}},
url = {http://dl.acm.org/citation.cfm?id=884439},
year = {2001}
}
@article{Sharma,
abstract = {Combating malware is very important for software/systems security, but to prevent the software/systems from the advanced malware, viz. metamorphic malware is a challenging task, as it changes the structure/code after each infection. Therefore in this paper, we present a novel approach to detect the advanced malware with high accuracy by analyzing the occurrence of opcodes (features) by grouping the executables. These groups are made on the basis of our earlier studies [1] that the difference between the sizes of any two malware generated by popular advanced malware kits viz. PS-MPC, G2 and NGVCK are within 5 KB. On the basis of obtained promising features, we studied the performance of thirteen classifiers using N-fold cross-validation available in machine learning tool WEKA. Among these thirteen classifiers we studied in-depth top five classifiers (Random forest, LMT, NBT, J48 and FT) and obtain more than 96.28{\%} accuracy for the detection of unknown malware, which is better than the maximum detection accuracy ({\~{}}95.9{\%}) reported by Santos et al (2013). In these top five classifiers, our approach obtained a detection accuracy of ∼97.95{\%} by the Random forest.},
author = {Sharma, Ashu and Sahay, Sanjay K},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/An effective approach for classification of advanced malware with high accuracy.pdf:pdf},
keywords = {Anti-Malware,Decision Tree,Machine Learning,Static Analysis,WEKA},
title = {{An effective approach for classification of advanced malware with high accuracy}},
url = {https://arxiv.org/ftp/arxiv/papers/1606/1606.06897.pdf}
}
@article{ISI:000303773100002,
abstract = {This paper proposes several novel methods, based on machine learning, to
detect malware in executable files without any need for preprocessing,
such as unpacking or disassembling. The basic method (Mal-ID) is a new
static (form-based) analysis methodology that uses common segment
analysis in order to detect malware files. By using common segment
analysis, Mal-ID is able to discard malware parts that originate from
benign code. In addition, Mal-ID uses a new kind of feature, termed
meta-feature, to better capture the properties of the analyzed segments.
Rather than using the entire file, as is usually the case with machine
learning based techniques, the new approach detects malware on the
segment level. This study also introduces two Mal-ID extensions that
improve the Mal-ID basic method in various aspects. We rigorously
evaluated Mal-ID and its two extensions with more than ten performance
measures, and compared them to the highly rated boosted decision tree
method under identical settings. The evaluation demonstrated that Mal-ID
and the two Mal-ID extensions outperformed the boosted decision tree
method in almost all respects. In addition, the results indicated that
by extracting meaningful features, it is sufficient to employ one simple
detection rule for classifying executable files.},
address = {31 GIBBS ST, BROOKLINE, MA 02446 USA},
author = {Tahan, Gil and Rokach, Lior and Shahar, Yuval},
file = {:C$\backslash$:/Users/Ihechi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Tahan, Rokach, Shahar - 2012 - Mal-ID Automatic Malware Detection Using Common Segment Analysis and Meta-Features.pdf:pdf},
issn = {1532-4435},
journal = {JOURNAL OF MACHINE LEARNING RESEARCH},
keywords = {computer security; malware detection; common segme},
month = {apr},
pages = {949--979},
publisher = {MICROTOME PUBL},
title = {{Mal-ID: Automatic Malware Detection Using Common Segment Analysis and Meta-Features}},
type = {Article},
volume = {13},
year = {2012}
}
@article{Santos2011,
abstract = {Malware is any type of malicious code that has the potential to harm a$\backslash$ncomputer or network. The volume of malware is growing at a faster rate$\backslash$nevery year and poses a serious global security threat. Although$\backslash$nsignature-based detection is the most widespread method used in$\backslash$ncommercial antivirus programs, it consistently fails to detect new$\backslash$nmalware. Supervised machine-learning models have been used to address$\backslash$nthis issue. However, the use of supervised learning is limited because$\backslash$nit needs a large amount of malicious code and benign software to be$\backslash$nlabelled first. In this study, the authors propose a new method that$\backslash$nuses single-class learning to detect unknown malware families. This$\backslash$nmethod is based on examining the frequencies of the appearance of opcode$\backslash$nsequences to build a machine-learning classifier using only one set of$\backslash$nlabelled instances within a specific class of either malware or$\backslash$nlegitimate software. The authors performed an empirical study that shows$\backslash$nthat this method can reduce the effort of labelling software while$\backslash$nmaintaining high accuracy.},
author = {Santos, I. and Brezo, F. and Sanz, B. and Laorden, C. and Bringas, P.G.},
doi = {10.1049/iet-ifs.2010.0180},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/Using Opcode sequences in single class learning to detect unknown malware.pdf:pdf},
issn = {17518709},
journal = {IET Information Security},
number = {4},
pages = {220},
title = {{Using opcode sequences in single-class learning to detect unknown malware}},
volume = {5},
year = {2011}
}
@article{Nissim2017,
author = {Nissim, Nir and Cohen, Aviad and Elovici, Yuval},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/ALDOCX  Detection of Unknown Malicious Microsoft Office Documents Using Designated.pdf:pdf},
journal = {IEEE Transactions on Information Forensics and Security},
number = {3},
pages = {631--646},
title = {{ALDOCX : Detection of Unknown Malicious Microsoft Office Documents Using Designated}},
url = {http://ieeexplore.ieee.org.salford.idm.oclc.org/document/7762928/},
volume = {12},
year = {2017}
}
@article{Cen2015,
abstract = {Mobile devices are an important part of our everyday lives, and the Android platform has become a market leader. In recent years a number of approaches for Android malware detection have been proposed, using permissions, source code analysis, or dynamic analysis. In this paper, we propose to use a probabilistic discriminative model based on regularized logistic regression for Android malware detection. Through extensive experimental evaluation, we demonstrate that it can generate probabilistic outputs with highly accurate classification results. In particular, we propose to use Android API calls as features extracted from decompiled source code, and analyze and explore issues in feature granularity, feature representation, feature selection, and regularization. We show that the probabilistic discriminative model also works well with permissions, and substantially outperforms the state-of-the-art methods for Android malware detection with application permissions. Furthermore, the discriminative learning model achieves the best detection results by combining both decompiled source code and application permissions. To the best of our knowledge, this is the first research that proposes probabilistic discriminative model for Android malware detection with a thorough study of desired representation of decompiled source code and is the first research work for Android malware detection task that combines both analysis of decompiled source code and application permissions.},
author = {Cen, Lei and Gates, Christoher S. and Si, Luo and Li, Ninghui},
doi = {10.1109/TDSC.2014.2355839},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/a probablistic discriminative model for android malware detection.pdf:pdf},
isbn = {1545-5971 VO - PP},
issn = {15455971},
journal = {IEEE Transactions on Dependable and Secure Computing},
keywords = {Android,discriminative model,machine learning,malicious application},
number = {4},
pages = {400--412},
title = {{A Probabilistic Discriminative Model for Android Malware Detection with Decompiled Source Code}},
url = {ieeexplore.ieee.org/document/6894210/},
volume = {12},
year = {2015}
}
@article{Das2016,
abstract = {Recently, malware has increasingly become a critical threat to embedded systems, while the conventional software solutions, such as antivirus and patches, have not been so successful in defending the ever-evolving and advanced malicious programs. In this paper, we propose a hardware-enhanced architecture, GuardOL, to perform online malware detection. GuardOL is a combined approach using processor and field-programmable gate array (FPGA). Our approach aims to capture the malicious behavior (i.e., high-level semantics) of malware. To this end, we first propose the frequency-centric model for feature construction using system call patterns of known malware and benign samples. We then develop a machine learning approach (using multilayer perceptron) in FPGA to train classifier using these features. At runtime, the trained classifier is used to classify the unknown samples as malware or benign, with early prediction. The experimental results show that our solution can achieve high classification accuracy, fast detection, low power consumption, and flexibility for easy functionality upgrade to adapt to new malware samples. One of the main advantages of our design is the support of early prediction-detecting 46{\%} of malware within first 30{\%} of their execution, while 97{\%} of the samples at 100{\%} of their execution, with {\textless}3{\%} false positives.},
author = {Das, Sanjeev and Liu, Yang and Zhang, Wei and Chandramohan, Mahintham},
doi = {10.1109/TIFS.2015.2491300},
file = {:C$\backslash$:/Users/Ihechi/OneDrive - University of Salford/CyberThreatIntelligence/Ref Materials/semantics based online malware detection.pdf:pdf},
isbn = {1556-6013},
issn = {15566013},
journal = {IEEE Transactions on Information Forensics and Security},
keywords = {Early prediction,Hardware-enhanced architecture,Malware detection,Reconfigurable malware detection,Runtime security},
number = {2},
pages = {289--302},
title = {{Semantics-based online malware detection: Towards efficient real-time protection against malware}},
url = {http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=7299317},
volume = {11},
year = {2016}
}
@article{Alazab2015,
abstract = {a b s t r a c t Malware is a major security threat confronting computer systems and networks and has increased in scale and impact from the early days of ICT. Traditional protection mechanisms are largely incapable of dealing with the diversity and volume of malware variants which is evident today. This paper examines the evolution of malware including the nature of its activity and variants, and the implication of this for computer security industry practices. As a first step to address this challenge, I propose a framework to extract features statically and dynam-ically from malware that reflect the behavior of its code such as the Windows Application Programming Interface (API) calls. Similarity based mining and machine learning methods have been employed to pro-file and classify malware behaviors. This method is based on the sequences of API sequence calls and frequency of appearance. Experimental analysis results using large datasets show that the proposed method is effective in identi-fying known malware variants, and also classifies malware with high accuracy and low false alarm rates. This encouraging result indicates that classification is a viable approach for similarity detection to help detect malware. This work advances the detection of zero-day malware and offers researchers another method for understanding impact.},
author = {Alazab, Mamoun},
doi = {10.1016/j.jss.2014.10.031},
file = {:C$\backslash$:/Users/Ihechi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Alazab - 2015 - Profiling and classifying the behavior of malicious codes.pdf:pdf},
journal = {The Journal of Systems {\&} Software},
keywords = {Cybercrime,Malware,Profiling},
pages = {91--102},
title = {{Profiling and classifying the behavior of malicious codes}},
url = {http://ac.els-cdn.com.salford.idm.oclc.org/S0164121214002283/1-s2.0-S0164121214002283-main.pdf?{\_}tid=f842d476-0bd5-11e7-b80a-00000aacb35f{\&}acdnat=1489840108{\_}05bbd410c95d09347f58c5ede72cbdce},
volume = {100},
year = {2015}
}
@article{Gardiner2016,
abstract = {One of the main challenges in security today is defending against malware attacks. As trends and anecdotal evidence show, preventing these attacks, regardless of their indiscriminate or targeted nature, has proven difficult: intrusions happen and devices get compromised, even at security-conscious organizations. As a consequence, an alternative line of work has focused on detecting and disrupting the individual steps that follow an initial compromise and are essential for the successful progression of the attack. In particular, several approaches and techniques have been proposed to identify the command and control (C{\&}C) channel that a compromised system establishes to communicate with its controller. A major oversight of many of these detection techniques is the design's resilience to evasion attempts by the well-motivated attacker. C{\&}C detection techniques make widespread use of a machine learning (ML) component. Therefore, to analyze the evasion resilience of these detection techniques, we first systematize works in the field of C{\&}C detection and then, using existing models from the literature, go on to systematize attacks against the ML components used in these approaches.},
author = {Gardiner, Joseph and Nagaraja, Shishir},
doi = {10.1145/3003816},
file = {:C$\backslash$:/Users/Ihechi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Gardiner, Nagaraja - 2016 - On the Security of Machine Learning in Malware C{\&}ampC Detection A Survey.pdf:pdf},
issn = {0360-0300},
journal = {ACM Computing Surveys (CSUR)},
keywords = {Command and control channels,botnets,data mining,machine learning,network intrusion},
number = {3},
pages = {59},
title = {{On the Security of Machine Learning in Malware C8C Detection: A Survey}},
volume = {49},
year = {2016}
}
@article{Menahem2009,
abstract = {Detection of malicious software (malware) using machine learning methods has been explored extensively to enable fast detection of new released malware. The performance of these classifiers depends on the induction algorithms being used. In order to benefit from multiple different classifiers, and exploit their strengths we suggest using an ensemble method that will combine the results of the individual classifiers into one final result to achieve overall higher detection accuracy. In this paper we evaluate several combining methods using five different base inducers (C4.5 Decision Tree, Na??ve Bayes, KNN, VFI and OneR) on five malware datasets. The main goal is to find the best combining method for the task of detecting malicious files in terms of accuracy, AUC and Execution time. ?? 2008 Elsevier B.V. All rights reserved.},
author = {Menahem, Eitan and Shabtai, Asaf and Rokach, Lior and Elovici, Yuval},
doi = {10.1016/j.csda.2008.10.015},
file = {:C$\backslash$:/Users/Ihechi/AppData/Local/Mendeley Ltd./Mendeley Desktop/Downloaded/Menahem et al. - 2009 - Computational Statistics and Data Analysis Improving malware detection by applying multi-inducer ensemble.pdf:pdf},
isbn = {0167-9473},
issn = {01679473},
journal = {Computational Statistics and Data Analysis},
number = {4},
pages = {1483--1494},
title = {{Improving malware detection by applying multi-inducer ensemble}},
url = {http://dx.doi.org.salford.idm.oclc.org/10.1016/j.csda.2008.10.015},
volume = {53},
year = {2009}
}
